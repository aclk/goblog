version: "3.7"

services:
  accountservice:
    image: someprefix/accountservice
    ports:
      - 6767:6767
    environment:
      ENVIRONMENT: "test"
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - my_network
    depends_on:
      - rabbitmq

  dataservice:
    image: someprefix/dataservice
    environment:
      ENVIRONMENT: "test"
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - my_network
    depends_on:
      - rabbitmq

  imageservice:
    image: someprefix/imageservice
    environment:
      ENVIRONMENT: "test"
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - my_network
    depends_on:
      - rabbitmq

  vipservice:
    image: someprefix/vipservice
    environment:
      ENVIRONMENT: "test"
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - my_network
    depends_on:
      - rabbitmq

  cockroachdb1:
    image: cockroachdb/cockroach:latest
    command:
      - "start"
      - "--insecure"
    ports:
      - "26257:26257"
      - "3030:8080"
    volumes:
      - "cockroach-data1:/cockroach/cockroach-data"
    restart: unless-stopped
    deploy:
      labels:
        - "cockroachdb"
    networks:
      - my_network

  cockroachdb2:
    image: cockroachdb/cockroach:latest
    command:
      - "start"
      - "--insecure"
      - "--join=cockroachdb1"
    volumes:
      - "cockroach-data2:/cockroach/cockroach-data"
    deploy:
      labels:
        - "cockroachdb"
    networks:
      - my_network
    depends_on:
      - cockroachdb1

  cockroachdb3:
    image: cockroachdb/cockroach:latest
    command:
      - "start"
      - "--insecure"
      - "--join=cockroachdb1"
    volumes:
      - "cockroach-data3:/cockroach/cockroach-data"
    deploy:
      labels:
        - "cockroachdb"
    networks:
      - my_network
    depends_on:
      - cockroachdb1

  accountdb-init:
    image: someprefix/cockroachdb-init
    entrypoint: /cockroach/init.sh
    command: account
    networks:
      - my_network
    depends_on:
      - cockroachdb1
    restart: on-failure

  imagedb-init:
    image: someprefix/cockroachdb-init
    entrypoint: /cockroach/init.sh
    command: image
    networks:
      - my_network
    depends_on:
      - cockroachdb1
    restart: on-failure

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - 9411:9411
    networks:
      - my_network
    depends_on:
      - rabbitmq
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  edge-server:
    image: someprefix/edge-server
    ports:
      - "8765:8765"
    networks:
      - my_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 5673:5673
      - 15672:15672
    networks:
      - my_network
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  dvizz:
    image: eriklupander/dvizz:latest
    ports:
      - "6969:6969"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - my_network
    deploy:
      placement:
        constraints: [node.role == manager]

  swarm-prometheus-discovery:
    image: someprefix/swarm-prometheus-discovery
    networks:
      - my_network
    volumes:
      - "swarm-endpoints:/etc/swarm-endpoints/"
      - "/var/run/docker.sock:/var/run/docker.sock"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    networks:
      - my_network
    volumes:
      - "swarm-endpoints:/etc/swarm-endpoints/"
      - "./config/prometheus:/etc/prometheus"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - my_network

volumes:
  cockroach-data1:
  cockroach-data2:
  cockroach-data3:
  swarm-endpoints:

networks:
  my_network:
    external: true
